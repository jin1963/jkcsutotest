let web3, userAccount, contract, usdtContract;

window.addEventListener("load", async () => {
  if (window.ethereum) {
    web3 = new Web3(window.ethereum);
  } else {
    document.getElementById("status").innerText = "‚ùå No Ethereum wallet found";
    return;
  }

  document.getElementById("connectWallet").addEventListener("click", connectWallet);
  document.getElementById("registerReferrer").addEventListener("click", registerReferrer);
  document.getElementById("purchase").addEventListener("click", purchaseKJC);
  document.getElementById("claimReferralReward").addEventListener("click", claimReferralReward);
  document.getElementById("copyLink").addEventListener("click", copyReferralLink);
});

async function connectWallet() {
  try {
    const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });
    userAccount = accounts[0];

    const networkId = await web3.eth.getChainId();
    if (networkId !== chainId) {
      alert("‚ö†Ô∏è Please connect to BNB Smart Chain Mainnet");
      return;
    }

    contract = new web3.eth.Contract(contractABI, contractAddress);
    usdtContract = new web3.eth.Contract(erc20ABI, usdtAddress);

    document.getElementById("status").innerText = `‚úÖ Connected: ${userAccount}`;
    updateReferralLink();
    loadStakes();
  } catch (err) {
    console.error(err);
    document.getElementById("status").innerText = "‚ùå Wallet connection failed";
  }
}

function updateReferralLink() {
  const refLink = `${window.location.origin}${window.location.pathname}?ref=${userAccount}`;
  document.getElementById("referralLink").value = refLink;
}

function copyReferralLink() {
  const input = document.getElementById("referralLink");
  input.select();
  document.execCommand("copy");
  alert("‚úÖ ‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß");
}

async function registerReferrer() {
  const referrer = document.getElementById("refInput").value.trim();
  if (!web3.utils.isAddress(referrer)) {
    alert("‚ùå ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ú‡∏π‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
    return;
  }
  try {
    await contract.methods.registerReferrer(referrer).send({ from: userAccount });
    alert("‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
  } catch (err) {
    console.error(err);
    alert("‚ùå ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  }
}

async function purchaseKJC() {
  const amount = document.getElementById("purchaseAmount").value;
  if (!amount || isNaN(amount) || parseFloat(amount) <= 0) {
    alert("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô USDT ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠");
    return;
  }

  const usdtAmount = web3.utils.toWei(amount, "mwei"); // USDT uses 6 decimals

  try {
    // Approve USDT first
    await usdtContract.methods.approve(contractAddress, usdtAmount).send({ from: userAccount });

    // Then call buyWithReferralAndStake
    await contract.methods.buyWithReferralAndStake(usdtAmount).send({ from: userAccount });

    alert("‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞ Stake ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
    loadStakes();
  } catch (err) {
    console.error(err);
    alert("‚ùå ‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  }
}

async function claimReferralReward() {
  try {
    await contract.methods.claimReferralReward().send({ from: userAccount });
    alert("‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
  } catch (err) {
    console.error(err);
    alert("‚ùå ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
  }
}

async function loadStakes() {
  if (!contract) return;

  const stakeList = document.getElementById("stakeList");
  stakeList.innerHTML = "";

  try {
    const count = await contract.methods.getStakeCount(userAccount).call();
    for (let i = 0; i < count; i++) {
      const stake = await contract.methods.getStake(userAccount, i).call();
      const amount = web3.utils.fromWei(stake.amount, "ether");
      const claimed = stake.claimed;
      const start = new Date(stake.startTime * 1000).toLocaleString();
      const claimBtn = !claimed
        ? `<button onclick="claimStakeReward(${i})">üí∞ Claim</button>
           <button onclick="unstake(${i})">üîì Unstake</button>`
        : `<span>‚úÖ Claimed</span>`;

      stakeList.innerHTML += `
        <li>
          <strong>${amount} KJC</strong><br/>
          Start: ${start}<br/>
          ${claimBtn}
        </li>
      `;
    }
  } catch (err) {
    console.error(err);
    stakeList.innerHTML = "<li>‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ stake ‡πÑ‡∏î‡πâ</li>";
  }
}

async function claimStakeReward(index) {
  try {
    await contract.methods.claimStakeReward(index).send({ from: userAccount });
    alert("‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    loadStakes();
  } catch (err) {
    console.error(err);
    alert("‚ùå ‡πÄ‡∏Ñ‡∏•‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
  }
}

async function unstake(index) {
  try {
    await contract.methods.unstake(index).send({ from: userAccount });
    alert("‚úÖ ‡∏ñ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ stake ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    loadStakes();
  } catch (err) {
    console.error(err);
    alert("‚ùå ‡∏ñ‡∏≠‡∏ô stake ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
  }
}

// Auto-load ref from URL
window.addEventListener("DOMContentLoaded", () => {
  const urlParams = new URLSearchParams(window.location.search);
  const ref = urlParams.get("ref");
  if (ref) {
    document.getElementById("refInput").value = ref;
  }
});
